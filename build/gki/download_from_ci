#!/usr/bin/env python3
#
# Copyright (C) 2019-2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import argparse
import functools
import json
import multiprocessing
import os
import sys
import urllib.request

BASE_URL = "https://ci.android.com/builds/submitted/{build_id}/{target}/latest/raw"


def download(url_base, filename):
  if not os.path.exists(filename):
    print("Downloading %s" % filename)
    try:
      urllib.request.urlretrieve(os.path.join(url_base, filename), filename)
    except urllib.error.HTTPError as e:
      print("Could not download %s: %s" % (filename, e))


def main():
  parser = argparse.ArgumentParser()
  parser.add_argument(
      "build_id",
      type=int,
      help="the build id to download the build for, e.g. 6148204")
  parser.add_argument(
      "build_target",
      type=str,
      help='the build target to download, e.g. "kernel_aarch64"')

  args = parser.parse_args()

  url_base = BASE_URL.format(build_id=args.build_id, target=args.build_target)

  # Download BUILD_INFO to get the file list
  url = os.path.join(url_base, "BUILD_INFO")
  response = urllib.request.urlopen(url)
  data = response.read().decode("utf-8")
  files = json.loads(data)["target"]["dir_list"]

  for f in files:
    dirname = os.path.dirname(f)
    if dirname and not os.path.isdir(dirname):
      os.makedirs(dirname)

  pool = multiprocessing.Pool(10)
  func = functools.partial(download, url_base)

  pool.map(func, files)


if __name__ == "__main__":
  sys.exit(main())
